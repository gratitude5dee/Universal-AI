import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { prompt, jsonPrompt, mode = 'natural' } = await req.json();
    
    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY not configured');
    }

    // Build the AI prompt based on mode
    let aiPrompt = '';
    
    if (mode === 'json' && jsonPrompt) {
      // Structured JSON prompt mode
      aiPrompt = `Create a merchandise design based on this specification:

Design Type: ${jsonPrompt.design_type || 'illustration'}
Style: ${jsonPrompt.style || 'modern'}
Subject: ${jsonPrompt.subject || 'abstract'}

${jsonPrompt.color_palette ? `
Color Palette:
- Primary: ${jsonPrompt.color_palette.primary || '#000000'}
- Secondary: ${jsonPrompt.color_palette.secondary || '#FFFFFF'}
- Accent: ${jsonPrompt.color_palette.accent || '#FF0000'}
- Mood: ${jsonPrompt.color_palette.mood || 'neutral'}
` : ''}

${jsonPrompt.composition ? `
Composition:
- Focal Point: ${jsonPrompt.composition.focal_point || 'center'}
- Balance: ${jsonPrompt.composition.balance || 'symmetrical'}
- Text Placement: ${jsonPrompt.composition.text_placement || 'none'}
` : ''}

${jsonPrompt.elements && jsonPrompt.elements.length > 0 ? `
Elements:
${jsonPrompt.elements.map((el: any, i: number) => `
${i + 1}. ${el.type}: "${el.content || ''}" ${el.font ? `(${el.font})` : ''} ${el.size ? `Size: ${el.size}` : ''} Position: ${el.position || 'center'}
`).join('')}
` : ''}

${jsonPrompt.effects && jsonPrompt.effects.length > 0 ? `
Effects: ${jsonPrompt.effects.join(', ')}
` : ''}

Create a high-quality design suitable for print on merchandise (t-shirts, hoodies, posters). The design should be bold, eye-catching, and work well on various product colors. Aspect ratio: square (1:1) for apparel, centered composition.`;
    } else {
      // Natural language mode
      aiPrompt = `${prompt}

Create a high-quality merchandise design based on the above description. The design should be:
- Bold and eye-catching
- Suitable for printing on apparel (t-shirts, hoodies) and accessories
- Work well on both light and dark backgrounds
- Professional and print-ready quality
- Centered composition, square aspect ratio (1:1)

Make it visually striking and commercially viable for merchandise sales.`;
    }

    console.log('[generate-merch-design] Calling Lovable AI with prompt length:', aiPrompt.length);

    // Call Lovable AI Gateway for image generation
    const aiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash-image-preview',
        messages: [
          { 
            role: 'user', 
            content: aiPrompt
          }
        ],
        modalities: ['image']
      }),
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('[generate-merch-design] AI API error:', aiResponse.status, errorText);
      
      if (aiResponse.status === 429) {
        return new Response(
          JSON.stringify({ error: 'Rate limit exceeded. Please try again later.' }),
          { status: 429, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      
      if (aiResponse.status === 402) {
        return new Response(
          JSON.stringify({ error: 'AI credits exhausted. Please add credits to continue.' }),
          { status: 402, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      
      throw new Error(`AI API error: ${aiResponse.status} ${errorText}`);
    }

    const aiData = await aiResponse.json();
    console.log('[generate-merch-design] AI response received');

    // Extract the generated image URL
    const images = aiData.choices?.[0]?.message?.images || [];
    if (images.length === 0) {
      throw new Error('No image generated by AI');
    }

    const imageUrl = images[0]?.image_url?.url;
    if (!imageUrl) {
      throw new Error('Invalid image URL in AI response');
    }

    console.log('[generate-merch-design] Image URL received');

    // Download the image
    const imageResponse = await fetch(imageUrl);
    if (!imageResponse.ok) {
      throw new Error('Failed to download generated image');
    }

    const imageBlob = await imageResponse.blob();
    const imageBuffer = await imageBlob.arrayBuffer();

    // Upload to Supabase Storage
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    const fileName = `design-${Date.now()}-${crypto.randomUUID()}.png`;
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('content-library')
      .upload(`merch-designs/${fileName}`, imageBuffer, {
        contentType: 'image/png',
        cacheControl: '3600',
      });

    if (uploadError) {
      console.error('[generate-merch-design] Storage upload error:', uploadError);
      throw uploadError;
    }

    // Get public URL
    const { data: urlData } = supabase.storage
      .from('content-library')
      .getPublicUrl(`merch-designs/${fileName}`);

    const publicUrl = urlData.publicUrl;

    console.log('[generate-merch-design] Design uploaded successfully');

    return new Response(
      JSON.stringify({ 
        imageUrl: publicUrl,
        fileName: fileName,
        prompt: mode === 'json' ? jsonPrompt : prompt,
        mode: mode
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    );

  } catch (error) {
    console.error('[generate-merch-design] Error:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Unknown error occurred',
        details: error instanceof Error ? error.stack : undefined
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});